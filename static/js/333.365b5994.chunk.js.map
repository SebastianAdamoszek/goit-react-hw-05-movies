{"version":3,"file":"static/js/333.365b5994.chunk.js","mappings":"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","sources":["Api/Api.js","webpack://goit-react-hw-05-movies/./src/components/SearchBar/SearchBarm.module.css?b5f2","components/SearchBar/SearchBar.js","webpack://goit-react-hw-05-movies/./src/components/MoviesList/MoviesList.module.css?de3d","components/MoviesList/MoviesList.js","pages/Movies/Movies.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = 'e8ab892b2ac2cd96b9f442270f7b9c45';\n\n// Pobieranie aktualnie najpopularniejszych filmów\nconst getTrending = async () => {\n  try {\n    const response = await axios.get(`trending/all/day?api_key=${API_KEY}`);\n\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(response.data.results);\n      }, 500);\n    });\n  } catch (error) {\n    console.log('getTrending error:', error);\n  }\n};\n\n// Wyszukiwanie filmu po słowie kluczowym\nconst searchMovies = async query => {\n  try {\n    const response = await axios.get(\n      `search/movie?api_key=${API_KEY}&query=${query}`\n    );\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(response.data.results);\n      }, 500);\n    });\n  } catch (error) {\n    console.log('searchMovies error:', error);\n  }\n};\n\n// Pobieranie wszytkich informacji o filmie\nconst getMovieDetails = async movieId => {\n  try {\n    const response = await axios.get(`movie/${movieId}?api_key=${API_KEY}`);\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(response.data);\n      }, 1000);\n    });\n  } catch (error) {\n    console.error('getMovieDetails error:', error);\n  }\n};\n\n// Pobieranie informacji o aktorach w danym filmie\nconst getMovieCredits = async movieId => {\n  try {\n    const response = await axios.get(\n      `movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(response.data.cast);\n      }, 500);\n    });\n  } catch (error) {\n    console.error('getMovieCredits error:', error);\n  }\n};\n\n// Pobieranie recenzji o filmie\nconst getMovieReviews = async movieId => {\n  try {\n    const response = await axios.get(\n      `movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(response.data.results);\n      }, 500);\n    });\n  } catch (error) {\n    console.error('getMovieReviews error:', error);\n  }\n};\n\nexport {\n  getTrending,\n  searchMovies,\n  getMovieDetails,\n  getMovieCredits,\n  getMovieReviews,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"Searchbar\":\"SearchBarm_Searchbar__UEnJI\",\"SearchForm\":\"SearchBarm_SearchForm__WazH0\",\"SearchFormButton\":\"SearchBarm_SearchFormButton__2UmCx\",\"SearchFormButtonLabel\":\"SearchBarm_SearchFormButtonLabel__atcJf\",\"SearchFormInput\":\"SearchBarm_SearchFormInput__97oXR\"};","import React from 'react';\nimport { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport css from './SearchBarm.module.css';\n\nconst Searchbar = ({ onSubmit }) => {\n  const [urlSearchParams, setUrlSearchParams] = useSearchParams();\n  const urlQuery = urlSearchParams.get('query');\n  const [query, setQuery] = useState(urlQuery || '');\n\n  const handleInputChange = event => {\n    setQuery(event.target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    onSubmit(query);\n    setUrlSearchParams({ query: query });\n    setQuery(''); // Czyszczenie pola wyszukiwania po wysłaniu formularza. Input znów jest pusty.\n  };\n\n  return (\n    <div className={css.Searchbar}>\n      <form className={css.SearchForm} onSubmit={handleSubmit}>\n        <button type=\"submit\" className={css.SearchFormButton}>\n          <span className={css.SearchFormButtonLabel}></span>\n        </button>\n        <input\n          className={css.SearchFormInput}\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n          id=\"searchInput\"\n          name=\"searchInput\"\n          value={query}\n          onChange={handleInputChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default Searchbar;\n","// extracted by mini-css-extract-plugin\nexport default {\"ErrorHeading\":\"MoviesList_ErrorHeading__c02u2\",\"MovieListBox\":\"MoviesList_MovieListBox__E2mky\",\"MovieList\":\"MoviesList_MovieList__XVN8b\",\"MovieListItem\":\"MoviesList_MovieListItem__RoK4C\",\"MovieListLink\":\"MoviesList_MovieListLink__8tncu\",\"MovieListStyle\":\"MoviesList_MovieListStyle__Vv7Va\"};","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport css from './MoviesList.module.css';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <div className={css.MovieListBox}>\n      <ul className={css.MovieList}>\n        {movies.map(movie => (\n          <li key={movie.id} className={css.MovieListItem}>\n            <Link\n              to={`${movie.id}`}\n              state={{ from: location }}\n              className={css.MovieListLink}\n            ><span className={css.MovieListStyle}></span>\n              {movie.title} ({movie.release_date.split('-')[0]})\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      release_date: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\nexport default MoviesList;\n","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { searchMovies } from 'Api/Api';\nimport Searchbar from 'components/SearchBar/SearchBar';\nimport Notiflix from 'notiflix';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport Loader from 'components/Loader/Loader';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    const fetchSearchMovies = async () => {\n      if (query === '') {\n        setIsLoading(false);\n      } else {\n        setIsLoading(true);\n      }\n\n      try {\n        const results = await searchMovies(query);\n        if (results.length === 0 && query !== '') {\n          Notiflix.Notify.warning(\n            'Sorry, there are no results for your query! Please try again.'\n          );\n          return;\n        }\n        setMovies(results);\n      } catch (error) {\n        console.error('FetchSearchMovies error:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchSearchMovies();\n  }, [query]);\n\n  const handleSearch = searchQuery => {\n    setMovies([]);\n    setQuery(searchQuery);\n  };\n\n  return (\n    <main>\n      <Searchbar onSubmit={handleSearch} />\n      {isLoading && <Loader />}\n      <MoviesList movies={movies} query={query} />\n    </main>\n  );\n};\nexport default Movies;\n"],"names":["axios","defaults","baseURL","API_KEY","getTrending","async","response","get","concat","Promise","resolve","setTimeout","data","results","error","console","log","searchMovies","query","getMovieDetails","movieId","getMovieCredits","cast","getMovieReviews","_ref","onSubmit","urlSearchParams","setUrlSearchParams","useSearchParams","urlQuery","setQuery","useState","_jsx","className","css","children","_jsxs","event","preventDefault","type","autoComplete","autoFocus","placeholder","id","name","value","onChange","target","movies","location","useLocation","map","movie","Link","to","state","from","title","release_date","split","Movies","setMovies","isLoading","setIsLoading","useEffect","length","Notiflix","warning","fetchSearchMovies","Searchbar","searchQuery","Loader","MoviesList"],"sourceRoot":""}